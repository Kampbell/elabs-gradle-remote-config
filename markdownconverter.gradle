

// specific git client dependency for fetching the template repository
buildscript {
	repositories { jcenter() }
	dependencies { classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2' }
}
	
allprojects {

	// clone template repository if cache is not populated
	task cloneHtmlTemplateGitRepo(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
	  dir = file(htmlTemplateCacheDir)
	  uri = htmlTempalteGitRepoUri
	  treeish = 'origin/master'
	}
	if (! new File(htmlTemplateCacheDir).exists()) {
		markdownToHtml.dependsOn cloneHtmlTemplateGitRepo
	}

	apply plugin: 'org.kordamp.markdown.convert'

	def markdownDocFolderPath = "$project.projectDir/$docsSrcDir"
	def markdownDocFolder = new File(markdownDocFolderPath)
	def htmlOutputDocFolder = file(docsDir)

	if (! markdownDocFolder.exists()) {
		markdownDocFolder.mkdirs()
	}
	
	// configure task
	markdownToHtml.sourceDir = markdownDocFolder
	markdownToHtml.outputDir = htmlOutputDocFolder
	markdownToHtml.configuration = [tables: true]
	
	// markdownToHtml does not generate proper header/headers neither styles.
	// use html templates from template cache (populated with git task above)
	markdownToHtml.doLast {
		copy {
			from "$htmlTemplateCacheDir/assets/"
			into "$docsDir/assets"
		}
		def templateFile = new File("$htmlTemplateCacheDir/template.html")
		if (templateFile.exists()) {
			def template = templateFile.getText("UTF-8")
			FileTree tree = fileTree(dir: "$docsDir", include: '**/*.html', exclude: ['/javadoc', '/groovydoc', '/template.html'])
			if (tree.isEmpty()) {
				// delete unused assets
				new File(docsDir.path+"/assets").deleteDir()
			} else {
				tree.each { File file ->
					logger.info "-- processing markdown documentation file {}",docsDir.toPath().relativize( file.toPath() ).toFile().toString()
					def content = file.getText("UTF-8")
					
					// compute the relative path to the root directory
					def relativePathToParent = file.getParentFile().toPath().relativize( docsDir.toPath() ).toFile().toString()
					if (! relativePathToParent.isEmpty()) { relativePathToParent += "/" }
					
					// insert proper content
					def result = template
						.replaceAll('#CONTENT') { content }
						.replaceAll('#LANG') { lang }
						.replaceAll('#TITLE') { documentationTitle }
						.replaceAll('#AUTHOR') { projectAuthor }
						.replaceAll('#DESCRIPTION') { projectDescription }
						.replaceAll('#FOOTER') { docFooter }
						.replaceAll('#RELATIVE_PATH') { relativePathToParent }
					
					// write result back
					file.write(result, 'UTF-8')
				}
			}
		} else {
			println "-- Warning: template not found. Repository cache may be corrupted."
		}
	}
	
	// make sure the documentation is built when task build is called
	build.dependsOn markdownToHtml
}
