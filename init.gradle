

println ""
println "-----------------------------------------------------------------------------------"
println "-- $title Gradle Build Script"
println "-----------------------------------------------------------------------------------"

ext {
	
	/****************************
	 ** Date
	 ****************************/
	 
	currentDate = new Date()
	buildYear = currentDate.format('yyyy')
	buildDate = currentDate.format('yyyy-MM-dd')
	buildTime = currentDate.format('HH:mm:ss.SSSZ')
	
	/****************************
	 ** Global project data
	 ****************************/
	 
	documentationTitle = "$title Documentation"
	projectDescription = "$description"
	projectAuthor = "$author"
	docCopyright = "$title v$version &#8208; &copy; $buildYear $projectAuthor"
	docFooter = "$docCopyright &#8208; <a href=\"$website\">$website</a> &#8208; <a href=\"mailto:$contact\">$contact</a>"
	docsSrcDir = "src/main/doc"
	docsDir = file("$project.buildDir/docs")

	// use by the markdown converter script to store the HTML template
	htmlTemplateCacheDir = "$rootProject.rootDir/.htmlTemplateCache/"
	
	if (project.hasProperty('sourceEncoding')) {
		logger.info("-- Using predefined encoding '${sourceEncoding}'")
	} else {
		sourceEncoding = "UTF-8"
		logger.info("-- Using default encoding '${sourceEncoding}'")
	}
	
	/****************************
	 ** Dependency versions
	 ****************************/
	
	// -- GRADLE -------------------
	GRADLE_VERSION	= "2.14.1"

}

println "-- "
println "-- Building version '$version'"
println "-- with " + GradleVersion.current().toString()
println "-- on Java Virtual Machine " + org.gradle.internal.jvm.Jvm.current()
println "--"
println "-- HINT : To print unit tests logs            : -PlogTest"
println "-- HINT : To compile outside company building : -Premote"
println "-- HINT : To overload the version             : -PmyVersion=xxx"
println "-- HINT : To ignore test failures             : -PignoreTestFailures"
println "--"
println "-- INFO : Source encoding : ${sourceEncoding}"

class CustomEventLogger extends BuildAdapter implements TaskExecutionListener {

	def title;
	def version;
	def project;
	def startClock;
	CustomEventLogger(def _title, def _version, def _project) {
		this.title = _title
		this.version = _version
		this.project = _project
		this.startClock = project.gradle.services.get(org.gradle.initialization.BuildRequestMetaData.class).buildTimeClock
		
	}
	
    public void beforeExecute(Task task) {
		def projectName = task.project.path
		if (! projectName.endsWith(":"))
			projectName += ":"
		def s = (startClock.getTimeInMs() / 1000).toLong()
		def ms = (startClock.getTimeInMs() % 1000).toLong()
		
        print "-- " + sprintf('[% 6d.%04d]', s, ms) + " " + projectName + task.name + " "
    }

    public void afterExecute(Task task, TaskState state) {
		def msg = state.getSkipMessage()
		if (msg != null)
			println "- " + msg
		else
			println()
    }
    
    public void buildFinished(BuildResult result) {
    
		def msg = "completed"
        if (result.failure != null) {
            result.failure.printStackTrace()
            msg = "terminated with failure"
        }

		println "--" 
		println "-----------------------------------------------------------------------------------"
		println "-- $title version $version"
		println "-- Build $msg after ${startClock.getTime()}"
		println "-----------------------------------------------------------------------------------"
		println ""
    }
}
gradle.useLogger(new CustomEventLogger(title, version, rootProject))

