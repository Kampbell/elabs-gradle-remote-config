ext.GIT = "git"

ext.getGitBranch = {
	def String rBranch
	if (project.hasProperty("branch")) {
		def branches = project.getProperty("branch").split('/')
		def branch =branches[branches.length-1]
		logger.info("-- Using parameter branch '$branch'")
		rBranch = branch
	} else {
		try {
			def stdout = new ByteArrayOutputStream()
			exec {
				executable = GIT
				args = [
					'rev-parse',
					'--abbrev-ref',
					'HEAD'
				]
				standardOutput = stdout
				standardError = null
			}
			def currentBranch = stdout.toString().trim()
			if (currentBranch.contains("release/")) {
				logger.info "-- Branch contains 'release'. Using 'candidate'".
				rBranch = "candidate"
			} else {
				def lastPath = currentBranch.split('/')
				rBranch = lastPath[lastPath.length-1]
				logger.info "-- Found branch '$rBranch'."
			}
		} catch(Exception e) {
			logger.info "-- Project is not in a git repository. Using 'local'."
			return "local"
		}
	}
	if (rBranch.contains("release/")) {
		logger.info "-- Branch contains 'release'. Using 'RC'".
		return "RC"
	}
	if (rBranch.contains("master")) {
		logger.info "-- Branch contains 'master'. No branch name is used."
		return ""
	}
	
	return rBranch
}

/**
 * Version rule management.
 */
ext.branch = getGitBranch()
gradle.allprojects {
	project.version = branch.isEmpty() ? version : (version + '.' + branch)
}

